// zod@3.25.63 downloaded from https://ga.jspm.io/npm:zod@3.25.63/dist/esm/index.js

var e;(function(e){e.assertEqual=e=>{};function t(e){}e.assertIs=t;function s(e){throw new Error}e.assertNever=s;e.arrayToEnum=e=>{const t={};for(const s of e)t[s]=s;return t};e.getValidEnumValues=t=>{const s=e.objectKeys(t).filter((e=>typeof t[t[e]]!=="number"));const a={};for(const e of s)a[e]=t[e];return e.objectValues(a)};e.objectValues=t=>e.objectKeys(t).map((function(e){return t[e]}));e.objectKeys=typeof Object.keys==="function"?e=>Object.keys(e):e=>{const t=[];for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.push(s);return t};e.find=(e,t)=>{for(const s of e)if(t(s))return s};e.isInteger=typeof Number.isInteger==="function"?e=>Number.isInteger(e):e=>typeof e==="number"&&Number.isFinite(e)&&Math.floor(e)===e;function a(e,t=" | "){return e.map((e=>typeof e==="string"?`'${e}'`:e)).join(t)}e.joinValues=a;e.jsonStringifyReplacer=(e,t)=>typeof t==="bigint"?t.toString():t})(e||(e={}));var t;(function(e){e.mergeShapes=(e,t)=>({...e,...t})})(t||(t={}));const s=e.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]);const a=e=>{const t=typeof e;switch(t){case"undefined":return s.undefined;case"string":return s.string;case"number":return Number.isNaN(e)?s.nan:s.number;case"boolean":return s.boolean;case"function":return s.function;case"bigint":return s.bigint;case"symbol":return s.symbol;case"object":return Array.isArray(e)?s.array:e===null?s.null:e.then&&typeof e.then==="function"&&e.catch&&typeof e.catch==="function"?s.promise:typeof Map!=="undefined"&&e instanceof Map?s.map:typeof Set!=="undefined"&&e instanceof Set?s.set:typeof Date!=="undefined"&&e instanceof Date?s.date:s.object;default:return s.unknown}};const n=e.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);const r=e=>{const t=JSON.stringify(e,null,2);return t.replace(/"([^"]+)":/g,"$1:")};class ZodError extends Error{get errors(){return this.issues}constructor(e){super();this.issues=[];this.addIssue=e=>{this.issues=[...this.issues,e]};this.addIssues=(e=[])=>{this.issues=[...this.issues,...e]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t;this.name="ZodError";this.issues=e}format(e){const t=e||function(e){return e.message};const s={_errors:[]};const a=e=>{for(const n of e.issues)if(n.code==="invalid_union")n.unionErrors.map(a);else if(n.code==="invalid_return_type")a(n.returnTypeError);else if(n.code==="invalid_arguments")a(n.argumentsError);else if(n.path.length===0)s._errors.push(t(n));else{let e=s;let a=0;while(a<n.path.length){const s=n.path[a];const r=a===n.path.length-1;if(r){e[s]=e[s]||{_errors:[]};e[s]._errors.push(t(n))}else e[s]=e[s]||{_errors:[]};e=e[s];a++}}};a(this);return s}static assert(e){if(!(e instanceof ZodError))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,e.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=e=>e.message){const t={};const s=[];for(const a of this.issues)if(a.path.length>0){t[a.path[0]]=t[a.path[0]]||[];t[a.path[0]].push(e(a))}else s.push(e(a));return{formErrors:s,fieldErrors:t}}get formErrors(){return this.flatten()}}ZodError.create=e=>{const t=new ZodError(e);return t};const i=(t,a)=>{let r;switch(t.code){case n.invalid_type:r=t.received===s.undefined?"Required":`Expected ${t.expected}, received ${t.received}`;break;case n.invalid_literal:r=`Invalid literal value, expected ${JSON.stringify(t.expected,e.jsonStringifyReplacer)}`;break;case n.unrecognized_keys:r=`Unrecognized key(s) in object: ${e.joinValues(t.keys,", ")}`;break;case n.invalid_union:r="Invalid input";break;case n.invalid_union_discriminator:r=`Invalid discriminator value. Expected ${e.joinValues(t.options)}`;break;case n.invalid_enum_value:r=`Invalid enum value. Expected ${e.joinValues(t.options)}, received '${t.received}'`;break;case n.invalid_arguments:r="Invalid function arguments";break;case n.invalid_return_type:r="Invalid function return type";break;case n.invalid_date:r="Invalid date";break;case n.invalid_string:if(typeof t.validation==="object")if("includes"in t.validation){r=`Invalid input: must include "${t.validation.includes}"`;typeof t.validation.position==="number"&&(r=`${r} at one or more positions greater than or equal to ${t.validation.position}`)}else"startsWith"in t.validation?r=`Invalid input: must start with "${t.validation.startsWith}"`:"endsWith"in t.validation?r=`Invalid input: must end with "${t.validation.endsWith}"`:e.assertNever(t.validation);else r=t.validation!=="regex"?`Invalid ${t.validation}`:"Invalid";break;case n.too_small:r=t.type==="array"?`Array must contain ${t.exact?"exactly":t.inclusive?"at least":"more than"} ${t.minimum} element(s)`:t.type==="string"?`String must contain ${t.exact?"exactly":t.inclusive?"at least":"over"} ${t.minimum} character(s)`:t.type==="number"?`Number must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${t.minimum}`:t.type==="date"?`Date must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(t.minimum))}`:"Invalid input";break;case n.too_big:r=t.type==="array"?`Array must contain ${t.exact?"exactly":t.inclusive?"at most":"less than"} ${t.maximum} element(s)`:t.type==="string"?`String must contain ${t.exact?"exactly":t.inclusive?"at most":"under"} ${t.maximum} character(s)`:t.type==="number"?`Number must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="bigint"?`BigInt must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="date"?`Date must be ${t.exact?"exactly":t.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(t.maximum))}`:"Invalid input";break;case n.custom:r="Invalid input";break;case n.invalid_intersection_types:r="Intersection results could not be merged";break;case n.not_multiple_of:r=`Number must be a multiple of ${t.multipleOf}`;break;case n.not_finite:r="Number must be finite";break;default:r=a.defaultError;e.assertNever(t)}return{message:r}};let o=i;function d(e){o=e}function c(){return o}const u=e=>{const{data:t,path:s,errorMaps:a,issueData:n}=e;const r=[...s,...n.path||[]];const i={...n,path:r};if(n.message!==void 0)return{...n,path:r,message:n.message};let o="";const d=a.filter((e=>!!e)).slice().reverse();for(const e of d)o=e(i,{data:t,defaultError:o}).message;return{...n,path:r,message:o}};const l=[];function p(e,t){const s=c();const a=u({issueData:t,data:e.data,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,s,s===i?void 0:i].filter((e=>!!e))});e.common.issues.push(a)}class ParseStatus{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const s=[];for(const a of t){if(a.status==="aborted")return h;a.status==="dirty"&&e.dirty();s.push(a.value)}return{status:e.value,value:s}}static async mergeObjectAsync(e,t){const s=[];for(const e of t){const t=await e.key;const a=await e.value;s.push({key:t,value:a})}return ParseStatus.mergeObjectSync(e,s)}static mergeObjectSync(e,t){const s={};for(const a of t){const{key:t,value:n}=a;if(t.status==="aborted")return h;if(n.status==="aborted")return h;t.status==="dirty"&&e.dirty();n.status==="dirty"&&e.dirty();t.value==="__proto__"||typeof n.value==="undefined"&&!a.alwaysSet||(s[t.value]=n.value)}return{status:e.value,value:s}}}const h=Object.freeze({status:"aborted"});const f=e=>({status:"dirty",value:e});const m=e=>({status:"valid",value:e});const y=e=>e.status==="aborted";const _=e=>e.status==="dirty";const g=e=>e.status==="valid";const v=e=>typeof Promise!=="undefined"&&e instanceof Promise;var Z;(function(e){e.errToObj=e=>typeof e==="string"?{message:e}:e||{};e.toString=e=>typeof e==="string"?e:e?.message})(Z||(Z={}));class ParseInputLazyPath{constructor(e,t,s,a){this._cachedPath=[];this.parent=e;this.data=t;this._path=s;this._key=a}get path(){this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key));return this._cachedPath}}const b=(e,t)=>{if(g(t))return{success:true,data:t.value};if(!e.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:false,get error(){if(this._error)return this._error;const t=new ZodError(e.common.issues);this._error=t;return this._error}}};function k(e){if(!e)return{};const{errorMap:t,invalid_type_error:s,required_error:a,description:n}=e;if(t&&(s||a))throw new Error('Can\'t use "invalid_type_error" or "required_error" in conjunction with custom error map.');if(t)return{errorMap:t,description:n};const r=(t,n)=>{const{message:r}=e;return t.code==="invalid_enum_value"?{message:r??n.defaultError}:typeof n.data==="undefined"?{message:r??a??n.defaultError}:t.code!=="invalid_type"?{message:n.defaultError}:{message:r??s??n.defaultError}};return{errorMap:r,description:n}}class ZodType{get description(){return this._def.description}_getType(e){return a(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:a(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new ParseStatus,ctx:{common:e.parent.common,data:e.data,parsedType:a(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(v(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const s=this.safeParse(e,t);if(s.success)return s.data;throw s.error}safeParse(e,t){const s={common:{issues:[],async:t?.async??false,contextualErrorMap:t?.errorMap},path:t?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:a(e)};const n=this._parseSync({data:e,path:s.path,parent:s});return b(s,n)}"~validate"(e){const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:a(e)};if(!this["~standard"].async)try{const s=this._parseSync({data:e,path:[],parent:t});return g(s)?{value:s.value}:{issues:t.common.issues}}catch(e){e?.message?.toLowerCase()?.includes("encountered")&&(this["~standard"].async=true);t.common={issues:[],async:true}}return this._parseAsync({data:e,path:[],parent:t}).then((e=>g(e)?{value:e.value}:{issues:t.common.issues}))}async parseAsync(e,t){const s=await this.safeParseAsync(e,t);if(s.success)return s.data;throw s.error}async safeParseAsync(e,t){const s={common:{issues:[],contextualErrorMap:t?.errorMap,async:true},path:t?.path||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:a(e)};const n=this._parse({data:e,path:s.path,parent:s});const r=await(v(n)?n:Promise.resolve(n));return b(s,r)}refine(e,t){const s=e=>typeof t==="string"||typeof t==="undefined"?{message:t}:typeof t==="function"?t(e):t;return this._refinement(((t,a)=>{const r=e(t);const i=()=>a.addIssue({code:n.custom,...s(t)});if(typeof Promise!=="undefined"&&r instanceof Promise)return r.then((e=>{if(e)return true;i();return false}));if(r)return true;i();return false}))}refinement(e,t){return this._refinement(((s,a)=>{if(e(s))return true;a.addIssue(typeof t==="function"?t(s,a):t);return false}))}_refinement(e){return new ZodEffects({schema:this,typeName:se.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync;this._def=e;this.parse=this.parse.bind(this);this.safeParse=this.safeParse.bind(this);this.parseAsync=this.parseAsync.bind(this);this.safeParseAsync=this.safeParseAsync.bind(this);this.spa=this.spa.bind(this);this.refine=this.refine.bind(this);this.refinement=this.refinement.bind(this);this.superRefine=this.superRefine.bind(this);this.optional=this.optional.bind(this);this.nullable=this.nullable.bind(this);this.nullish=this.nullish.bind(this);this.array=this.array.bind(this);this.promise=this.promise.bind(this);this.or=this.or.bind(this);this.and=this.and.bind(this);this.transform=this.transform.bind(this);this.brand=this.brand.bind(this);this.default=this.default.bind(this);this.catch=this.catch.bind(this);this.describe=this.describe.bind(this);this.pipe=this.pipe.bind(this);this.readonly=this.readonly.bind(this);this.isNullable=this.isNullable.bind(this);this.isOptional=this.isOptional.bind(this);this["~standard"]={version:1,vendor:"zod",validate:e=>this["~validate"](e)}}optional(){return ZodOptional.create(this,this._def)}nullable(){return ZodNullable.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return ZodArray.create(this)}promise(){return ZodPromise.create(this,this._def)}or(e){return ZodUnion.create([this,e],this._def)}and(e){return ZodIntersection.create(this,e,this._def)}transform(e){return new ZodEffects({...k(this._def),schema:this,typeName:se.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e==="function"?e:()=>e;return new ZodDefault({...k(this._def),innerType:this,defaultValue:t,typeName:se.ZodDefault})}brand(){return new ZodBranded({typeName:se.ZodBranded,type:this,...k(this._def)})}catch(e){const t=typeof e==="function"?e:()=>e;return new ZodCatch({...k(this._def),innerType:this,catchValue:t,typeName:se.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return ZodPipeline.create(this,e)}readonly(){return ZodReadonly.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const x=/^c[^\s-]{8,}$/i;const w=/^[0-9a-z]+$/;const T=/^[0-9A-HJKMNP-TV-Z]{26}$/i;const N=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;const O=/^[a-z0-9_-]{21}$/i;const S=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;const E=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;const A=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;const j="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let P;const C=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;const I=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;const R=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;const $=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;const L=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;const M=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;const D="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))";const z=new RegExp(`^${D}$`);function F(e){let t="[0-5]\\d";e.precision?t=`${t}\\.\\d{${e.precision}}`:e.precision==null&&(t=`${t}(\\.\\d+)?`);const s=e.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${t})${s}`}function U(e){return new RegExp(`^${F(e)}$`)}function B(e){let t=`${D}T${F(e)}`;const s=[];s.push(e.local?"Z?":"Z");e.offset&&s.push("([+-]\\d{2}:?\\d{2})");t=`${t}(${s.join("|")})`;return new RegExp(`^${t}$`)}function V(e,t){return!(t!=="v4"&&t||!C.test(e))||!(t!=="v6"&&t||!R.test(e))}function K(e,t){if(!S.test(e))return false;try{const[s]=e.split(".");const a=s.replace(/-/g,"+").replace(/_/g,"/").padEnd(s.length+(4-s.length%4)%4,"=");const n=JSON.parse(atob(a));return typeof n==="object"&&n!==null&&((!("typ"in n)||n?.typ==="JWT")&&(!!n.alg&&(!t||n.alg===t)))}catch{return false}}function W(e,t){return!(t!=="v4"&&t||!I.test(e))||!(t!=="v6"&&t||!$.test(e))}class ZodString extends ZodType{_parse(t){this._def.coerce&&(t.data=String(t.data));const a=this._getType(t);if(a!==s.string){const e=this._getOrReturnCtx(t);p(e,{code:n.invalid_type,expected:s.string,received:e.parsedType});return h}const r=new ParseStatus;let i;for(const s of this._def.checks)if(s.kind==="min"){if(t.data.length<s.value){i=this._getOrReturnCtx(t,i);p(i,{code:n.too_small,minimum:s.value,type:"string",inclusive:true,exact:false,message:s.message});r.dirty()}}else if(s.kind==="max"){if(t.data.length>s.value){i=this._getOrReturnCtx(t,i);p(i,{code:n.too_big,maximum:s.value,type:"string",inclusive:true,exact:false,message:s.message});r.dirty()}}else if(s.kind==="length"){const e=t.data.length>s.value;const a=t.data.length<s.value;if(e||a){i=this._getOrReturnCtx(t,i);e?p(i,{code:n.too_big,maximum:s.value,type:"string",inclusive:true,exact:true,message:s.message}):a&&p(i,{code:n.too_small,minimum:s.value,type:"string",inclusive:true,exact:true,message:s.message});r.dirty()}}else if(s.kind==="email"){if(!A.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"email",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="emoji"){P||(P=new RegExp(j,"u"));if(!P.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"emoji",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="uuid"){if(!N.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"uuid",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="nanoid"){if(!O.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"nanoid",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="cuid"){if(!x.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"cuid",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="cuid2"){if(!w.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"cuid2",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="ulid"){if(!T.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"ulid",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="url")try{new URL(t.data)}catch{i=this._getOrReturnCtx(t,i);p(i,{validation:"url",code:n.invalid_string,message:s.message});r.dirty()}else if(s.kind==="regex"){s.regex.lastIndex=0;const e=s.regex.test(t.data);if(!e){i=this._getOrReturnCtx(t,i);p(i,{validation:"regex",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="trim")t.data=t.data.trim();else if(s.kind==="includes"){if(!t.data.includes(s.value,s.position)){i=this._getOrReturnCtx(t,i);p(i,{code:n.invalid_string,validation:{includes:s.value,position:s.position},message:s.message});r.dirty()}}else if(s.kind==="toLowerCase")t.data=t.data.toLowerCase();else if(s.kind==="toUpperCase")t.data=t.data.toUpperCase();else if(s.kind==="startsWith"){if(!t.data.startsWith(s.value)){i=this._getOrReturnCtx(t,i);p(i,{code:n.invalid_string,validation:{startsWith:s.value},message:s.message});r.dirty()}}else if(s.kind==="endsWith"){if(!t.data.endsWith(s.value)){i=this._getOrReturnCtx(t,i);p(i,{code:n.invalid_string,validation:{endsWith:s.value},message:s.message});r.dirty()}}else if(s.kind==="datetime"){const e=B(s);if(!e.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{code:n.invalid_string,validation:"datetime",message:s.message});r.dirty()}}else if(s.kind==="date"){const e=z;if(!e.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{code:n.invalid_string,validation:"date",message:s.message});r.dirty()}}else if(s.kind==="time"){const e=U(s);if(!e.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{code:n.invalid_string,validation:"time",message:s.message});r.dirty()}}else if(s.kind==="duration"){if(!E.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"duration",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="ip"){if(!V(t.data,s.version)){i=this._getOrReturnCtx(t,i);p(i,{validation:"ip",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="jwt"){if(!K(t.data,s.alg)){i=this._getOrReturnCtx(t,i);p(i,{validation:"jwt",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="cidr"){if(!W(t.data,s.version)){i=this._getOrReturnCtx(t,i);p(i,{validation:"cidr",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="base64"){if(!L.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"base64",code:n.invalid_string,message:s.message});r.dirty()}}else if(s.kind==="base64url"){if(!M.test(t.data)){i=this._getOrReturnCtx(t,i);p(i,{validation:"base64url",code:n.invalid_string,message:s.message});r.dirty()}}else e.assertNever(s);return{status:r.value,value:t.data}}_regex(e,t,s){return this.refinement((t=>e.test(t)),{validation:t,code:n.invalid_string,...Z.errToObj(s)})}_addCheck(e){return new ZodString({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...Z.errToObj(e)})}url(e){return this._addCheck({kind:"url",...Z.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...Z.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...Z.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...Z.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...Z.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...Z.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...Z.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...Z.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...Z.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...Z.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...Z.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...Z.errToObj(e)})}datetime(e){return typeof e==="string"?this._addCheck({kind:"datetime",precision:null,offset:false,local:false,message:e}):this._addCheck({kind:"datetime",precision:typeof e?.precision==="undefined"?null:e?.precision,offset:e?.offset??false,local:e?.local??false,...Z.errToObj(e?.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e==="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof e?.precision==="undefined"?null:e?.precision,...Z.errToObj(e?.message)})}duration(e){return this._addCheck({kind:"duration",...Z.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...Z.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t?.position,...Z.errToObj(t?.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...Z.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...Z.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...Z.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...Z.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...Z.errToObj(t)})}nonempty(e){return this.min(1,Z.errToObj(e))}trim(){return new ZodString({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new ZodString({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new ZodString({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find((e=>e.kind==="datetime"))}get isDate(){return!!this._def.checks.find((e=>e.kind==="date"))}get isTime(){return!!this._def.checks.find((e=>e.kind==="time"))}get isDuration(){return!!this._def.checks.find((e=>e.kind==="duration"))}get isEmail(){return!!this._def.checks.find((e=>e.kind==="email"))}get isURL(){return!!this._def.checks.find((e=>e.kind==="url"))}get isEmoji(){return!!this._def.checks.find((e=>e.kind==="emoji"))}get isUUID(){return!!this._def.checks.find((e=>e.kind==="uuid"))}get isNANOID(){return!!this._def.checks.find((e=>e.kind==="nanoid"))}get isCUID(){return!!this._def.checks.find((e=>e.kind==="cuid"))}get isCUID2(){return!!this._def.checks.find((e=>e.kind==="cuid2"))}get isULID(){return!!this._def.checks.find((e=>e.kind==="ulid"))}get isIP(){return!!this._def.checks.find((e=>e.kind==="ip"))}get isCIDR(){return!!this._def.checks.find((e=>e.kind==="cidr"))}get isBase64(){return!!this._def.checks.find((e=>e.kind==="base64"))}get isBase64url(){return!!this._def.checks.find((e=>e.kind==="base64url"))}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}ZodString.create=e=>new ZodString({checks:[],typeName:se.ZodString,coerce:e?.coerce??false,...k(e)});function q(e,t){const s=(e.toString().split(".")[1]||"").length;const a=(t.toString().split(".")[1]||"").length;const n=s>a?s:a;const r=Number.parseInt(e.toFixed(n).replace(".",""));const i=Number.parseInt(t.toFixed(n).replace(".",""));return r%i/10**n}class ZodNumber extends ZodType{constructor(){super(...arguments);this.min=this.gte;this.max=this.lte;this.step=this.multipleOf}_parse(t){this._def.coerce&&(t.data=Number(t.data));const a=this._getType(t);if(a!==s.number){const e=this._getOrReturnCtx(t);p(e,{code:n.invalid_type,expected:s.number,received:e.parsedType});return h}let r;const i=new ParseStatus;for(const s of this._def.checks)if(s.kind==="int"){if(!e.isInteger(t.data)){r=this._getOrReturnCtx(t,r);p(r,{code:n.invalid_type,expected:"integer",received:"float",message:s.message});i.dirty()}}else if(s.kind==="min"){const e=s.inclusive?t.data<s.value:t.data<=s.value;if(e){r=this._getOrReturnCtx(t,r);p(r,{code:n.too_small,minimum:s.value,type:"number",inclusive:s.inclusive,exact:false,message:s.message});i.dirty()}}else if(s.kind==="max"){const e=s.inclusive?t.data>s.value:t.data>=s.value;if(e){r=this._getOrReturnCtx(t,r);p(r,{code:n.too_big,maximum:s.value,type:"number",inclusive:s.inclusive,exact:false,message:s.message});i.dirty()}}else if(s.kind==="multipleOf"){if(q(t.data,s.value)!==0){r=this._getOrReturnCtx(t,r);p(r,{code:n.not_multiple_of,multipleOf:s.value,message:s.message});i.dirty()}}else if(s.kind==="finite"){if(!Number.isFinite(t.data)){r=this._getOrReturnCtx(t,r);p(r,{code:n.not_finite,message:s.message});i.dirty()}}else e.assertNever(s);return{status:i.value,value:t.data}}gte(e,t){return this.setLimit("min",e,true,Z.toString(t))}gt(e,t){return this.setLimit("min",e,false,Z.toString(t))}lte(e,t){return this.setLimit("max",e,true,Z.toString(t))}lt(e,t){return this.setLimit("max",e,false,Z.toString(t))}setLimit(e,t,s,a){return new ZodNumber({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:s,message:Z.toString(a)}]})}_addCheck(e){return new ZodNumber({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:Z.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:false,message:Z.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:false,message:Z.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:true,message:Z.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:true,message:Z.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:Z.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:Z.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:true,value:Number.MIN_SAFE_INTEGER,message:Z.toString(e)})._addCheck({kind:"max",inclusive:true,value:Number.MAX_SAFE_INTEGER,message:Z.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find((t=>t.kind==="int"||t.kind==="multipleOf"&&e.isInteger(t.value)))}get isFinite(){let e=null;let t=null;for(const s of this._def.checks){if(s.kind==="finite"||s.kind==="int"||s.kind==="multipleOf")return true;s.kind==="min"?(t===null||s.value>t)&&(t=s.value):s.kind==="max"&&(e===null||s.value<e)&&(e=s.value)}return Number.isFinite(t)&&Number.isFinite(e)}}ZodNumber.create=e=>new ZodNumber({checks:[],typeName:se.ZodNumber,coerce:e?.coerce||false,...k(e)});class ZodBigInt extends ZodType{constructor(){super(...arguments);this.min=this.gte;this.max=this.lte}_parse(t){if(this._def.coerce)try{t.data=BigInt(t.data)}catch{return this._getInvalidInput(t)}const a=this._getType(t);if(a!==s.bigint)return this._getInvalidInput(t);let r;const i=new ParseStatus;for(const s of this._def.checks)if(s.kind==="min"){const e=s.inclusive?t.data<s.value:t.data<=s.value;if(e){r=this._getOrReturnCtx(t,r);p(r,{code:n.too_small,type:"bigint",minimum:s.value,inclusive:s.inclusive,message:s.message});i.dirty()}}else if(s.kind==="max"){const e=s.inclusive?t.data>s.value:t.data>=s.value;if(e){r=this._getOrReturnCtx(t,r);p(r,{code:n.too_big,type:"bigint",maximum:s.value,inclusive:s.inclusive,message:s.message});i.dirty()}}else if(s.kind==="multipleOf"){if(t.data%s.value!==BigInt(0)){r=this._getOrReturnCtx(t,r);p(r,{code:n.not_multiple_of,multipleOf:s.value,message:s.message});i.dirty()}}else e.assertNever(s);return{status:i.value,value:t.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.bigint,received:t.parsedType});return h}gte(e,t){return this.setLimit("min",e,true,Z.toString(t))}gt(e,t){return this.setLimit("min",e,false,Z.toString(t))}lte(e,t){return this.setLimit("max",e,true,Z.toString(t))}lt(e,t){return this.setLimit("max",e,false,Z.toString(t))}setLimit(e,t,s,a){return new ZodBigInt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:s,message:Z.toString(a)}]})}_addCheck(e){return new ZodBigInt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:false,message:Z.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:false,message:Z.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:true,message:Z.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:true,message:Z.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:Z.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}ZodBigInt.create=e=>new ZodBigInt({checks:[],typeName:se.ZodBigInt,coerce:e?.coerce??false,...k(e)});class ZodBoolean extends ZodType{_parse(e){this._def.coerce&&(e.data=Boolean(e.data));const t=this._getType(e);if(t!==s.boolean){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.boolean,received:t.parsedType});return h}return m(e.data)}}ZodBoolean.create=e=>new ZodBoolean({typeName:se.ZodBoolean,coerce:e?.coerce||false,...k(e)});class ZodDate extends ZodType{_parse(t){this._def.coerce&&(t.data=new Date(t.data));const a=this._getType(t);if(a!==s.date){const e=this._getOrReturnCtx(t);p(e,{code:n.invalid_type,expected:s.date,received:e.parsedType});return h}if(Number.isNaN(t.data.getTime())){const e=this._getOrReturnCtx(t);p(e,{code:n.invalid_date});return h}const r=new ParseStatus;let i;for(const s of this._def.checks)if(s.kind==="min"){if(t.data.getTime()<s.value){i=this._getOrReturnCtx(t,i);p(i,{code:n.too_small,message:s.message,inclusive:true,exact:false,minimum:s.value,type:"date"});r.dirty()}}else if(s.kind==="max"){if(t.data.getTime()>s.value){i=this._getOrReturnCtx(t,i);p(i,{code:n.too_big,message:s.message,inclusive:true,exact:false,maximum:s.value,type:"date"});r.dirty()}}else e.assertNever(s);return{status:r.value,value:new Date(t.data.getTime())}}_addCheck(e){return new ZodDate({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:Z.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:Z.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}ZodDate.create=e=>new ZodDate({checks:[],coerce:e?.coerce||false,typeName:se.ZodDate,...k(e)});class ZodSymbol extends ZodType{_parse(e){const t=this._getType(e);if(t!==s.symbol){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.symbol,received:t.parsedType});return h}return m(e.data)}}ZodSymbol.create=e=>new ZodSymbol({typeName:se.ZodSymbol,...k(e)});class ZodUndefined extends ZodType{_parse(e){const t=this._getType(e);if(t!==s.undefined){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.undefined,received:t.parsedType});return h}return m(e.data)}}ZodUndefined.create=e=>new ZodUndefined({typeName:se.ZodUndefined,...k(e)});class ZodNull extends ZodType{_parse(e){const t=this._getType(e);if(t!==s.null){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.null,received:t.parsedType});return h}return m(e.data)}}ZodNull.create=e=>new ZodNull({typeName:se.ZodNull,...k(e)});class ZodAny extends ZodType{constructor(){super(...arguments);this._any=true}_parse(e){return m(e.data)}}ZodAny.create=e=>new ZodAny({typeName:se.ZodAny,...k(e)});class ZodUnknown extends ZodType{constructor(){super(...arguments);this._unknown=true}_parse(e){return m(e.data)}}ZodUnknown.create=e=>new ZodUnknown({typeName:se.ZodUnknown,...k(e)});class ZodNever extends ZodType{_parse(e){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.never,received:t.parsedType});return h}}ZodNever.create=e=>new ZodNever({typeName:se.ZodNever,...k(e)});class ZodVoid extends ZodType{_parse(e){const t=this._getType(e);if(t!==s.undefined){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.void,received:t.parsedType});return h}return m(e.data)}}ZodVoid.create=e=>new ZodVoid({typeName:se.ZodVoid,...k(e)});class ZodArray extends ZodType{_parse(e){const{ctx:t,status:a}=this._processInputParams(e);const r=this._def;if(t.parsedType!==s.array){p(t,{code:n.invalid_type,expected:s.array,received:t.parsedType});return h}if(r.exactLength!==null){const e=t.data.length>r.exactLength.value;const s=t.data.length<r.exactLength.value;if(e||s){p(t,{code:e?n.too_big:n.too_small,minimum:s?r.exactLength.value:void 0,maximum:e?r.exactLength.value:void 0,type:"array",inclusive:true,exact:true,message:r.exactLength.message});a.dirty()}}if(r.minLength!==null&&t.data.length<r.minLength.value){p(t,{code:n.too_small,minimum:r.minLength.value,type:"array",inclusive:true,exact:false,message:r.minLength.message});a.dirty()}if(r.maxLength!==null&&t.data.length>r.maxLength.value){p(t,{code:n.too_big,maximum:r.maxLength.value,type:"array",inclusive:true,exact:false,message:r.maxLength.message});a.dirty()}if(t.common.async)return Promise.all([...t.data].map(((e,s)=>r.type._parseAsync(new ParseInputLazyPath(t,e,t.path,s))))).then((e=>ParseStatus.mergeArray(a,e)));const i=[...t.data].map(((e,s)=>r.type._parseSync(new ParseInputLazyPath(t,e,t.path,s))));return ParseStatus.mergeArray(a,i)}get element(){return this._def.type}min(e,t){return new ZodArray({...this._def,minLength:{value:e,message:Z.toString(t)}})}max(e,t){return new ZodArray({...this._def,maxLength:{value:e,message:Z.toString(t)}})}length(e,t){return new ZodArray({...this._def,exactLength:{value:e,message:Z.toString(t)}})}nonempty(e){return this.min(1,e)}}ZodArray.create=(e,t)=>new ZodArray({type:e,minLength:null,maxLength:null,exactLength:null,typeName:se.ZodArray,...k(t)});function J(e){if(e instanceof ZodObject){const t={};for(const s in e.shape){const a=e.shape[s];t[s]=ZodOptional.create(J(a))}return new ZodObject({...e._def,shape:()=>t})}return e instanceof ZodArray?new ZodArray({...e._def,type:J(e.element)}):e instanceof ZodOptional?ZodOptional.create(J(e.unwrap())):e instanceof ZodNullable?ZodNullable.create(J(e.unwrap())):e instanceof ZodTuple?ZodTuple.create(e.items.map((e=>J(e)))):e}class ZodObject extends ZodType{constructor(){super(...arguments);this._cached=null;
/**
         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
         * If you want to pass through unknown properties, use `.passthrough()` instead.
         */this.nonstrict=this.passthrough;
/**
         * @deprecated Use `.extend` instead
         *  */this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const t=this._def.shape();const s=e.objectKeys(t);this._cached={shape:t,keys:s};return this._cached}_parse(e){const t=this._getType(e);if(t!==s.object){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.object,received:t.parsedType});return h}const{status:a,ctx:r}=this._processInputParams(e);const{shape:i,keys:o}=this._getCached();const d=[];if(!(this._def.catchall instanceof ZodNever&&this._def.unknownKeys==="strip"))for(const e in r.data)o.includes(e)||d.push(e);const c=[];for(const e of o){const t=i[e];const s=r.data[e];c.push({key:{status:"valid",value:e},value:t._parse(new ParseInputLazyPath(r,s,r.path,e)),alwaysSet:e in r.data})}if(this._def.catchall instanceof ZodNever){const e=this._def.unknownKeys;if(e==="passthrough")for(const e of d)c.push({key:{status:"valid",value:e},value:{status:"valid",value:r.data[e]}});else if(e==="strict"){if(d.length>0){p(r,{code:n.unrecognized_keys,keys:d});a.dirty()}}else if(e!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const e=this._def.catchall;for(const t of d){const s=r.data[t];c.push({key:{status:"valid",value:t},value:e._parse(new ParseInputLazyPath(r,s,r.path,t)),alwaysSet:t in r.data})}}return r.common.async?Promise.resolve().then((async()=>{const e=[];for(const t of c){const s=await t.key;const a=await t.value;e.push({key:s,value:a,alwaysSet:t.alwaysSet})}return e})).then((e=>ParseStatus.mergeObjectSync(a,e))):ParseStatus.mergeObjectSync(a,c)}get shape(){return this._def.shape()}strict(e){Z.errToObj;return new ZodObject({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,s)=>{const a=this._def.errorMap?.(t,s).message??s.defaultError;return t.code==="unrecognized_keys"?{message:Z.errToObj(e).message??a}:{message:a}}}:{}})}strip(){return new ZodObject({...this._def,unknownKeys:"strip"})}passthrough(){return new ZodObject({...this._def,unknownKeys:"passthrough"})}extend(e){return new ZodObject({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){const t=new ZodObject({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:se.ZodObject});return t}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new ZodObject({...this._def,catchall:e})}pick(t){const s={};for(const a of e.objectKeys(t))t[a]&&this.shape[a]&&(s[a]=this.shape[a]);return new ZodObject({...this._def,shape:()=>s})}omit(t){const s={};for(const a of e.objectKeys(this.shape))t[a]||(s[a]=this.shape[a]);return new ZodObject({...this._def,shape:()=>s})}
/**
     * @deprecated
     */deepPartial(){return J(this)}partial(t){const s={};for(const a of e.objectKeys(this.shape)){const e=this.shape[a];t&&!t[a]?s[a]=e:s[a]=e.optional()}return new ZodObject({...this._def,shape:()=>s})}required(t){const s={};for(const a of e.objectKeys(this.shape))if(t&&!t[a])s[a]=this.shape[a];else{const e=this.shape[a];let t=e;while(t instanceof ZodOptional)t=t._def.innerType;s[a]=t}return new ZodObject({...this._def,shape:()=>s})}keyof(){return G(e.objectKeys(this.shape))}}ZodObject.create=(e,t)=>new ZodObject({shape:()=>e,unknownKeys:"strip",catchall:ZodNever.create(),typeName:se.ZodObject,...k(t)});ZodObject.strictCreate=(e,t)=>new ZodObject({shape:()=>e,unknownKeys:"strict",catchall:ZodNever.create(),typeName:se.ZodObject,...k(t)});ZodObject.lazycreate=(e,t)=>new ZodObject({shape:e,unknownKeys:"strip",catchall:ZodNever.create(),typeName:se.ZodObject,...k(t)});class ZodUnion extends ZodType{_parse(e){const{ctx:t}=this._processInputParams(e);const s=this._def.options;function a(e){for(const t of e)if(t.result.status==="valid")return t.result;for(const s of e)if(s.result.status==="dirty"){t.common.issues.push(...s.ctx.common.issues);return s.result}const s=e.map((e=>new ZodError(e.ctx.common.issues)));p(t,{code:n.invalid_union,unionErrors:s});return h}if(t.common.async)return Promise.all(s.map((async e=>{const s={...t,common:{...t.common,issues:[]},parent:null};return{result:await e._parseAsync({data:t.data,path:t.path,parent:s}),ctx:s}}))).then(a);{let e;const a=[];for(const n of s){const s={...t,common:{...t.common,issues:[]},parent:null};const r=n._parseSync({data:t.data,path:t.path,parent:s});if(r.status==="valid")return r;r.status!=="dirty"||e||(e={result:r,ctx:s});s.common.issues.length&&a.push(s.common.issues)}if(e){t.common.issues.push(...e.ctx.common.issues);return e.result}const r=a.map((e=>new ZodError(e)));p(t,{code:n.invalid_union,unionErrors:r});return h}}get options(){return this._def.options}}ZodUnion.create=(e,t)=>new ZodUnion({options:e,typeName:se.ZodUnion,...k(t)});const Y=t=>t instanceof ZodLazy?Y(t.schema):t instanceof ZodEffects?Y(t.innerType()):t instanceof ZodLiteral?[t.value]:t instanceof ZodEnum?t.options:t instanceof ZodNativeEnum?e.objectValues(t.enum):t instanceof ZodDefault?Y(t._def.innerType):t instanceof ZodUndefined?[void 0]:t instanceof ZodNull?[null]:t instanceof ZodOptional?[void 0,...Y(t.unwrap())]:t instanceof ZodNullable?[null,...Y(t.unwrap())]:t instanceof ZodBranded||t instanceof ZodReadonly?Y(t.unwrap()):t instanceof ZodCatch?Y(t._def.innerType):[];class ZodDiscriminatedUnion extends ZodType{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==s.object){p(t,{code:n.invalid_type,expected:s.object,received:t.parsedType});return h}const a=this.discriminator;const r=t.data[a];const i=this.optionsMap.get(r);if(!i){p(t,{code:n.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[a]});return h}return t.common.async?i._parseAsync({data:t.data,path:t.path,parent:t}):i._parseSync({data:t.data,path:t.path,parent:t})}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}
/**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */static create(e,t,s){const a=new Map;for(const s of t){const t=Y(s.shape[e]);if(!t.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const n of t){if(a.has(n))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(n)}`);a.set(n,s)}}return new ZodDiscriminatedUnion({typeName:se.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:a,...k(s)})}}function H(t,n){const r=a(t);const i=a(n);if(t===n)return{valid:true,data:t};if(r===s.object&&i===s.object){const s=e.objectKeys(n);const a=e.objectKeys(t).filter((e=>s.indexOf(e)!==-1));const r={...t,...n};for(const e of a){const s=H(t[e],n[e]);if(!s.valid)return{valid:false};r[e]=s.data}return{valid:true,data:r}}if(r===s.array&&i===s.array){if(t.length!==n.length)return{valid:false};const e=[];for(let s=0;s<t.length;s++){const a=t[s];const r=n[s];const i=H(a,r);if(!i.valid)return{valid:false};e.push(i.data)}return{valid:true,data:e}}return r===s.date&&i===s.date&&+t===+n?{valid:true,data:t}:{valid:false}}class ZodIntersection extends ZodType{_parse(e){const{status:t,ctx:s}=this._processInputParams(e);const a=(e,a)=>{if(y(e)||y(a))return h;const r=H(e.value,a.value);if(!r.valid){p(s,{code:n.invalid_intersection_types});return h}(_(e)||_(a))&&t.dirty();return{status:t.value,value:r.data}};return s.common.async?Promise.all([this._def.left._parseAsync({data:s.data,path:s.path,parent:s}),this._def.right._parseAsync({data:s.data,path:s.path,parent:s})]).then((([e,t])=>a(e,t))):a(this._def.left._parseSync({data:s.data,path:s.path,parent:s}),this._def.right._parseSync({data:s.data,path:s.path,parent:s}))}}ZodIntersection.create=(e,t,s)=>new ZodIntersection({left:e,right:t,typeName:se.ZodIntersection,...k(s)});class ZodTuple extends ZodType{_parse(e){const{status:t,ctx:a}=this._processInputParams(e);if(a.parsedType!==s.array){p(a,{code:n.invalid_type,expected:s.array,received:a.parsedType});return h}if(a.data.length<this._def.items.length){p(a,{code:n.too_small,minimum:this._def.items.length,inclusive:true,exact:false,type:"array"});return h}const r=this._def.rest;if(!r&&a.data.length>this._def.items.length){p(a,{code:n.too_big,maximum:this._def.items.length,inclusive:true,exact:false,type:"array"});t.dirty()}const i=[...a.data].map(((e,t)=>{const s=this._def.items[t]||this._def.rest;return s?s._parse(new ParseInputLazyPath(a,e,a.path,t)):null})).filter((e=>!!e));return a.common.async?Promise.all(i).then((e=>ParseStatus.mergeArray(t,e))):ParseStatus.mergeArray(t,i)}get items(){return this._def.items}rest(e){return new ZodTuple({...this._def,rest:e})}}ZodTuple.create=(e,t)=>{if(!Array.isArray(e))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new ZodTuple({items:e,typeName:se.ZodTuple,rest:null,...k(t)})};class ZodRecord extends ZodType{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:a}=this._processInputParams(e);if(a.parsedType!==s.object){p(a,{code:n.invalid_type,expected:s.object,received:a.parsedType});return h}const r=[];const i=this._def.keyType;const o=this._def.valueType;for(const e in a.data)r.push({key:i._parse(new ParseInputLazyPath(a,e,a.path,e)),value:o._parse(new ParseInputLazyPath(a,a.data[e],a.path,e)),alwaysSet:e in a.data});return a.common.async?ParseStatus.mergeObjectAsync(t,r):ParseStatus.mergeObjectSync(t,r)}get element(){return this._def.valueType}static create(e,t,s){return new ZodRecord(t instanceof ZodType?{keyType:e,valueType:t,typeName:se.ZodRecord,...k(s)}:{keyType:ZodString.create(),valueType:e,typeName:se.ZodRecord,...k(t)})}}class ZodMap extends ZodType{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:a}=this._processInputParams(e);if(a.parsedType!==s.map){p(a,{code:n.invalid_type,expected:s.map,received:a.parsedType});return h}const r=this._def.keyType;const i=this._def.valueType;const o=[...a.data.entries()].map((([e,t],s)=>({key:r._parse(new ParseInputLazyPath(a,e,a.path,[s,"key"])),value:i._parse(new ParseInputLazyPath(a,t,a.path,[s,"value"]))})));if(a.common.async){const e=new Map;return Promise.resolve().then((async()=>{for(const s of o){const a=await s.key;const n=await s.value;if(a.status==="aborted"||n.status==="aborted")return h;a.status!=="dirty"&&n.status!=="dirty"||t.dirty();e.set(a.value,n.value)}return{status:t.value,value:e}}))}{const e=new Map;for(const s of o){const a=s.key;const n=s.value;if(a.status==="aborted"||n.status==="aborted")return h;a.status!=="dirty"&&n.status!=="dirty"||t.dirty();e.set(a.value,n.value)}return{status:t.value,value:e}}}}ZodMap.create=(e,t,s)=>new ZodMap({valueType:t,keyType:e,typeName:se.ZodMap,...k(s)});class ZodSet extends ZodType{_parse(e){const{status:t,ctx:a}=this._processInputParams(e);if(a.parsedType!==s.set){p(a,{code:n.invalid_type,expected:s.set,received:a.parsedType});return h}const r=this._def;if(r.minSize!==null&&a.data.size<r.minSize.value){p(a,{code:n.too_small,minimum:r.minSize.value,type:"set",inclusive:true,exact:false,message:r.minSize.message});t.dirty()}if(r.maxSize!==null&&a.data.size>r.maxSize.value){p(a,{code:n.too_big,maximum:r.maxSize.value,type:"set",inclusive:true,exact:false,message:r.maxSize.message});t.dirty()}const i=this._def.valueType;function o(e){const s=new Set;for(const a of e){if(a.status==="aborted")return h;a.status==="dirty"&&t.dirty();s.add(a.value)}return{status:t.value,value:s}}const d=[...a.data.values()].map(((e,t)=>i._parse(new ParseInputLazyPath(a,e,a.path,t))));return a.common.async?Promise.all(d).then((e=>o(e))):o(d)}min(e,t){return new ZodSet({...this._def,minSize:{value:e,message:Z.toString(t)}})}max(e,t){return new ZodSet({...this._def,maxSize:{value:e,message:Z.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}ZodSet.create=(e,t)=>new ZodSet({valueType:e,minSize:null,maxSize:null,typeName:se.ZodSet,...k(t)});class ZodFunction extends ZodType{constructor(){super(...arguments);this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==s.function){p(t,{code:n.invalid_type,expected:s.function,received:t.parsedType});return h}function a(e,s){return u({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,c(),i].filter((e=>!!e)),issueData:{code:n.invalid_arguments,argumentsError:s}})}function r(e,s){return u({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,c(),i].filter((e=>!!e)),issueData:{code:n.invalid_return_type,returnTypeError:s}})}const o={errorMap:t.common.contextualErrorMap};const d=t.data;if(this._def.returns instanceof ZodPromise){const e=this;return m((async function(...t){const s=new ZodError([]);const n=await e._def.args.parseAsync(t,o).catch((e=>{s.addIssue(a(t,e));throw s}));const i=await Reflect.apply(d,this,n);const c=await e._def.returns._def.type.parseAsync(i,o).catch((e=>{s.addIssue(r(i,e));throw s}));return c}))}{const e=this;return m((function(...t){const s=e._def.args.safeParse(t,o);if(!s.success)throw new ZodError([a(t,s.error)]);const n=Reflect.apply(d,this,s.data);const i=e._def.returns.safeParse(n,o);if(!i.success)throw new ZodError([r(n,i.error)]);return i.data}))}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new ZodFunction({...this._def,args:ZodTuple.create(e).rest(ZodUnknown.create())})}returns(e){return new ZodFunction({...this._def,returns:e})}implement(e){const t=this.parse(e);return t}strictImplement(e){const t=this.parse(e);return t}static create(e,t,s){return new ZodFunction({args:e||ZodTuple.create([]).rest(ZodUnknown.create()),returns:t||ZodUnknown.create(),typeName:se.ZodFunction,...k(s)})}}class ZodLazy extends ZodType{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);const s=this._def.getter();return s._parse({data:t.data,path:t.path,parent:t})}}ZodLazy.create=(e,t)=>new ZodLazy({getter:e,typeName:se.ZodLazy,...k(t)});class ZodLiteral extends ZodType{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);p(t,{received:t.data,code:n.invalid_literal,expected:this._def.value});return h}return{status:"valid",value:e.data}}get value(){return this._def.value}}ZodLiteral.create=(e,t)=>new ZodLiteral({value:e,typeName:se.ZodLiteral,...k(t)});function G(e,t){return new ZodEnum({values:e,typeName:se.ZodEnum,...k(t)})}class ZodEnum extends ZodType{_parse(t){if(typeof t.data!=="string"){const s=this._getOrReturnCtx(t);const a=this._def.values;p(s,{expected:e.joinValues(a),received:s.parsedType,code:n.invalid_type});return h}this._cache||(this._cache=new Set(this._def.values));if(!this._cache.has(t.data)){const e=this._getOrReturnCtx(t);const s=this._def.values;p(e,{received:e.data,code:n.invalid_enum_value,options:s});return h}return m(t.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return ZodEnum.create(e,{...this._def,...t})}exclude(e,t=this._def){return ZodEnum.create(this.options.filter((t=>!e.includes(t))),{...this._def,...t})}}ZodEnum.create=G;class ZodNativeEnum extends ZodType{_parse(t){const a=e.getValidEnumValues(this._def.values);const r=this._getOrReturnCtx(t);if(r.parsedType!==s.string&&r.parsedType!==s.number){const t=e.objectValues(a);p(r,{expected:e.joinValues(t),received:r.parsedType,code:n.invalid_type});return h}this._cache||(this._cache=new Set(e.getValidEnumValues(this._def.values)));if(!this._cache.has(t.data)){const t=e.objectValues(a);p(r,{received:r.data,code:n.invalid_enum_value,options:t});return h}return m(t.data)}get enum(){return this._def.values}}ZodNativeEnum.create=(e,t)=>new ZodNativeEnum({values:e,typeName:se.ZodNativeEnum,...k(t)});class ZodPromise extends ZodType{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==s.promise&&t.common.async===false){p(t,{code:n.invalid_type,expected:s.promise,received:t.parsedType});return h}const a=t.parsedType===s.promise?t.data:Promise.resolve(t.data);return m(a.then((e=>this._def.type.parseAsync(e,{path:t.path,errorMap:t.common.contextualErrorMap}))))}}ZodPromise.create=(e,t)=>new ZodPromise({type:e,typeName:se.ZodPromise,...k(t)});class ZodEffects extends ZodType{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===se.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(t){const{status:s,ctx:a}=this._processInputParams(t);const n=this._def.effect||null;const r={addIssue:e=>{p(a,e);e.fatal?s.abort():s.dirty()},get path(){return a.path}};r.addIssue=r.addIssue.bind(r);if(n.type==="preprocess"){const e=n.transform(a.data,r);if(a.common.async)return Promise.resolve(e).then((async e=>{if(s.value==="aborted")return h;const t=await this._def.schema._parseAsync({data:e,path:a.path,parent:a});return t.status==="aborted"?h:t.status==="dirty"||s.value==="dirty"?f(t.value):t}));{if(s.value==="aborted")return h;const t=this._def.schema._parseSync({data:e,path:a.path,parent:a});return t.status==="aborted"?h:t.status==="dirty"||s.value==="dirty"?f(t.value):t}}if(n.type==="refinement"){const e=e=>{const t=n.refinement(e,r);if(a.common.async)return Promise.resolve(t);if(t instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return e};if(a.common.async===false){const t=this._def.schema._parseSync({data:a.data,path:a.path,parent:a});if(t.status==="aborted")return h;t.status==="dirty"&&s.dirty();e(t.value);return{status:s.value,value:t.value}}return this._def.schema._parseAsync({data:a.data,path:a.path,parent:a}).then((t=>{if(t.status==="aborted")return h;t.status==="dirty"&&s.dirty();return e(t.value).then((()=>({status:s.value,value:t.value})))}))}if(n.type==="transform"){if(a.common.async===false){const e=this._def.schema._parseSync({data:a.data,path:a.path,parent:a});if(!g(e))return h;const t=n.transform(e.value,r);if(t instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:s.value,value:t}}return this._def.schema._parseAsync({data:a.data,path:a.path,parent:a}).then((e=>g(e)?Promise.resolve(n.transform(e.value,r)).then((e=>({status:s.value,value:e}))):h))}e.assertNever(n)}}ZodEffects.create=(e,t,s)=>new ZodEffects({schema:e,typeName:se.ZodEffects,effect:t,...k(s)});ZodEffects.createWithPreprocess=(e,t,s)=>new ZodEffects({schema:t,effect:{type:"preprocess",transform:e},typeName:se.ZodEffects,...k(s)});class ZodOptional extends ZodType{_parse(e){const t=this._getType(e);return t===s.undefined?m(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}ZodOptional.create=(e,t)=>new ZodOptional({innerType:e,typeName:se.ZodOptional,...k(t)});class ZodNullable extends ZodType{_parse(e){const t=this._getType(e);return t===s.null?m(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}ZodNullable.create=(e,t)=>new ZodNullable({innerType:e,typeName:se.ZodNullable,...k(t)});class ZodDefault extends ZodType{_parse(e){const{ctx:t}=this._processInputParams(e);let a=t.data;t.parsedType===s.undefined&&(a=this._def.defaultValue());return this._def.innerType._parse({data:a,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}ZodDefault.create=(e,t)=>new ZodDefault({innerType:e,typeName:se.ZodDefault,defaultValue:typeof t.default==="function"?t.default:()=>t.default,...k(t)});class ZodCatch extends ZodType{_parse(e){const{ctx:t}=this._processInputParams(e);const s={...t,common:{...t.common,issues:[]}};const a=this._def.innerType._parse({data:s.data,path:s.path,parent:{...s}});return v(a)?a.then((e=>({status:"valid",value:e.status==="valid"?e.value:this._def.catchValue({get error(){return new ZodError(s.common.issues)},input:s.data})}))):{status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new ZodError(s.common.issues)},input:s.data})}}removeCatch(){return this._def.innerType}}ZodCatch.create=(e,t)=>new ZodCatch({innerType:e,typeName:se.ZodCatch,catchValue:typeof t.catch==="function"?t.catch:()=>t.catch,...k(t)});class ZodNaN extends ZodType{_parse(e){const t=this._getType(e);if(t!==s.nan){const t=this._getOrReturnCtx(e);p(t,{code:n.invalid_type,expected:s.nan,received:t.parsedType});return h}return{status:"valid",value:e.data}}}ZodNaN.create=e=>new ZodNaN({typeName:se.ZodNaN,...k(e)});const X=Symbol("zod_brand");class ZodBranded extends ZodType{_parse(e){const{ctx:t}=this._processInputParams(e);const s=t.data;return this._def.type._parse({data:s,path:t.path,parent:t})}unwrap(){return this._def.type}}class ZodPipeline extends ZodType{_parse(e){const{status:t,ctx:s}=this._processInputParams(e);if(s.common.async){const e=async()=>{const e=await this._def.in._parseAsync({data:s.data,path:s.path,parent:s});if(e.status==="aborted")return h;if(e.status==="dirty"){t.dirty();return f(e.value)}return this._def.out._parseAsync({data:e.value,path:s.path,parent:s})};return e()}{const e=this._def.in._parseSync({data:s.data,path:s.path,parent:s});if(e.status==="aborted")return h;if(e.status==="dirty"){t.dirty();return{status:"dirty",value:e.value}}return this._def.out._parseSync({data:e.value,path:s.path,parent:s})}}static create(e,t){return new ZodPipeline({in:e,out:t,typeName:se.ZodPipeline})}}class ZodReadonly extends ZodType{_parse(e){const t=this._def.innerType._parse(e);const s=e=>{g(e)&&(e.value=Object.freeze(e.value));return e};return v(t)?t.then((e=>s(e))):s(t)}unwrap(){return this._def.innerType}}ZodReadonly.create=(e,t)=>new ZodReadonly({innerType:e,typeName:se.ZodReadonly,...k(t)});function Q(e,t){const s=typeof e==="function"?e(t):typeof e==="string"?{message:e}:e;const a=typeof s==="string"?{message:s}:s;return a}function ee(e,t={}
/**
 * @deprecated
 *
 * Pass `fatal` into the params object instead:
 *
 * ```ts
 * z.string().custom((val) => val.length > 5, { fatal: false })
 * ```
 *
 */,s){return e?ZodAny.create().superRefine(((a,n)=>{const r=e(a);if(r instanceof Promise)return r.then((e=>{if(!e){const e=Q(t,a);const r=e.fatal??s??true;n.addIssue({code:"custom",...e,fatal:r})}}));if(!r){const e=Q(t,a);const r=e.fatal??s??true;n.addIssue({code:"custom",...e,fatal:r})}})):ZodAny.create()}const te={object:ZodObject.lazycreate};var se;(function(e){e.ZodString="ZodString";e.ZodNumber="ZodNumber";e.ZodNaN="ZodNaN";e.ZodBigInt="ZodBigInt";e.ZodBoolean="ZodBoolean";e.ZodDate="ZodDate";e.ZodSymbol="ZodSymbol";e.ZodUndefined="ZodUndefined";e.ZodNull="ZodNull";e.ZodAny="ZodAny";e.ZodUnknown="ZodUnknown";e.ZodNever="ZodNever";e.ZodVoid="ZodVoid";e.ZodArray="ZodArray";e.ZodObject="ZodObject";e.ZodUnion="ZodUnion";e.ZodDiscriminatedUnion="ZodDiscriminatedUnion";e.ZodIntersection="ZodIntersection";e.ZodTuple="ZodTuple";e.ZodRecord="ZodRecord";e.ZodMap="ZodMap";e.ZodSet="ZodSet";e.ZodFunction="ZodFunction";e.ZodLazy="ZodLazy";e.ZodLiteral="ZodLiteral";e.ZodEnum="ZodEnum";e.ZodEffects="ZodEffects";e.ZodNativeEnum="ZodNativeEnum";e.ZodOptional="ZodOptional";e.ZodNullable="ZodNullable";e.ZodDefault="ZodDefault";e.ZodCatch="ZodCatch";e.ZodPromise="ZodPromise";e.ZodBranded="ZodBranded";e.ZodPipeline="ZodPipeline";e.ZodReadonly="ZodReadonly"})(se||(se={}));const ae=(e,t={message:`Input not instance of ${e.name}`})=>ee((t=>t instanceof e),t);const ne=ZodString.create;const re=ZodNumber.create;const ie=ZodNaN.create;const oe=ZodBigInt.create;const de=ZodBoolean.create;const ce=ZodDate.create;const ue=ZodSymbol.create;const le=ZodUndefined.create;const pe=ZodNull.create;const he=ZodAny.create;const fe=ZodUnknown.create;const me=ZodNever.create;const ye=ZodVoid.create;const _e=ZodArray.create;const ge=ZodObject.create;const ve=ZodObject.strictCreate;const Ze=ZodUnion.create;const be=ZodDiscriminatedUnion.create;const ke=ZodIntersection.create;const xe=ZodTuple.create;const we=ZodRecord.create;const Te=ZodMap.create;const Ne=ZodSet.create;const Oe=ZodFunction.create;const Se=ZodLazy.create;const Ee=ZodLiteral.create;const Ae=ZodEnum.create;const je=ZodNativeEnum.create;const Pe=ZodPromise.create;const Ce=ZodEffects.create;const Ie=ZodOptional.create;const Re=ZodNullable.create;const $e=ZodEffects.createWithPreprocess;const Le=ZodPipeline.create;const Me=()=>ne().optional();const De=()=>re().optional();const ze=()=>de().optional();const Fe={string:e=>ZodString.create({...e,coerce:true}),number:e=>ZodNumber.create({...e,coerce:true}),boolean:e=>ZodBoolean.create({...e,coerce:true}),bigint:e=>ZodBigInt.create({...e,coerce:true}),date:e=>ZodDate.create({...e,coerce:true})};const Ue=h;var Be=Object.freeze(Object.defineProperty({__proto__:null,BRAND:X,DIRTY:f,EMPTY_PATH:l,INVALID:h,NEVER:Ue,OK:m,ParseStatus:ParseStatus,Schema:ZodType,ZodAny:ZodAny,ZodArray:ZodArray,ZodBigInt:ZodBigInt,ZodBoolean:ZodBoolean,ZodBranded:ZodBranded,ZodCatch:ZodCatch,ZodDate:ZodDate,ZodDefault:ZodDefault,ZodDiscriminatedUnion:ZodDiscriminatedUnion,ZodEffects:ZodEffects,ZodEnum:ZodEnum,ZodError:ZodError,get ZodFirstPartyTypeKind(){return se},ZodFunction:ZodFunction,ZodIntersection:ZodIntersection,ZodIssueCode:n,ZodLazy:ZodLazy,ZodLiteral:ZodLiteral,ZodMap:ZodMap,ZodNaN:ZodNaN,ZodNativeEnum:ZodNativeEnum,ZodNever:ZodNever,ZodNull:ZodNull,ZodNullable:ZodNullable,ZodNumber:ZodNumber,ZodObject:ZodObject,ZodOptional:ZodOptional,ZodParsedType:s,ZodPipeline:ZodPipeline,ZodPromise:ZodPromise,ZodReadonly:ZodReadonly,ZodRecord:ZodRecord,ZodSchema:ZodType,ZodSet:ZodSet,ZodString:ZodString,ZodSymbol:ZodSymbol,ZodTransformer:ZodEffects,ZodTuple:ZodTuple,ZodType:ZodType,ZodUndefined:ZodUndefined,ZodUnion:ZodUnion,ZodUnknown:ZodUnknown,ZodVoid:ZodVoid,addIssueToContext:p,any:he,array:_e,bigint:oe,boolean:de,coerce:Fe,custom:ee,date:ce,datetimeRegex:B,defaultErrorMap:i,discriminatedUnion:be,effect:Ce,enum:Ae,function:Oe,getErrorMap:c,getParsedType:a,instanceof:ae,intersection:ke,isAborted:y,isAsync:v,isDirty:_,isValid:g,late:te,lazy:Se,literal:Ee,makeIssue:u,map:Te,nan:ie,nativeEnum:je,never:me,null:pe,nullable:Re,number:re,object:ge,get objectUtil(){return t},oboolean:ze,onumber:De,optional:Ie,ostring:Me,pipeline:Le,preprocess:$e,promise:Pe,quotelessJson:r,record:we,set:Ne,setErrorMap:d,strictObject:ve,string:ne,symbol:ue,transformer:Ce,tuple:xe,undefined:le,union:Ze,unknown:fe,get util(){return e},void:ye},Symbol.toStringTag,{value:"Module"}));export{X as BRAND,f as DIRTY,l as EMPTY_PATH,h as INVALID,Ue as NEVER,m as OK,ParseStatus,ZodType as Schema,ZodAny,ZodArray,ZodBigInt,ZodBoolean,ZodBranded,ZodCatch,ZodDate,ZodDefault,ZodDiscriminatedUnion,ZodEffects,ZodEnum,ZodError,se as ZodFirstPartyTypeKind,ZodFunction,ZodIntersection,n as ZodIssueCode,ZodLazy,ZodLiteral,ZodMap,ZodNaN,ZodNativeEnum,ZodNever,ZodNull,ZodNullable,ZodNumber,ZodObject,ZodOptional,s as ZodParsedType,ZodPipeline,ZodPromise,ZodReadonly,ZodRecord,ZodType as ZodSchema,ZodSet,ZodString,ZodSymbol,ZodEffects as ZodTransformer,ZodTuple,ZodType,ZodUndefined,ZodUnion,ZodUnknown,ZodVoid,p as addIssueToContext,he as any,_e as array,oe as bigint,de as boolean,Fe as coerce,ee as custom,ce as date,B as datetimeRegex,Be as default,i as defaultErrorMap,be as discriminatedUnion,Ce as effect,Ae as enum,Oe as function,c as getErrorMap,a as getParsedType,ae as instanceof,ke as intersection,y as isAborted,v as isAsync,_ as isDirty,g as isValid,te as late,Se as lazy,Ee as literal,u as makeIssue,Te as map,ie as nan,je as nativeEnum,me as never,pe as null,Re as nullable,re as number,ge as object,t as objectUtil,ze as oboolean,De as onumber,Ie as optional,Me as ostring,Le as pipeline,$e as preprocess,Pe as promise,r as quotelessJson,we as record,Ne as set,d as setErrorMap,ve as strictObject,ne as string,ue as symbol,Ce as transformer,xe as tuple,le as undefined,Ze as union,fe as unknown,e as util,ye as void,Be as z};

